#+title: Emacs Config
#+author: Kishore S
#+tags: Emacs, Doom Emacs

* Table of Contents :toc:
- [[#name-and-email][Name and Email]]
- [[#doom-theme][Doom theme]]
- [[#doom-font][Doom font]]
- [[#doom-modeline][Doom Modeline]]
- [[#org-shift-select][Org Shift Select]]
- [[#org-directory][Org directory]]
- [[#evil-mode][Evil mode]]
  - [[#vertical-splits-on-the-right--horizontal-splits-on-the-bottom][Vertical Splits on the right & horizontal splits on the bottom]]
- [[#dashboard][Dashboard]]
  - [[#banner-image--remove-the-keyboard-shortcut-tips-on-startup][Banner image + remove the keyboard shortcut tips on startup]]
  - [[#dashboard-in-emacsclient][Dashboard in Emacsclient]]
  - [[#dashboard-startup-banner-and-stuff][Dashboard Startup banner and stuff]]
- [[#all-the-icons-dired][All the Icons Dired]]
- [[#org-mode][Org Mode]]
  - [[#org-bullets][Org Bullets]]
  - [[#org-syntax-higlighting][Org Syntax Higlighting]]
  - [[#org-keybindings][Org keybindings]]
- [[#centaur-tabs][Centaur Tabs]]
  - [[#basic-setup][Basic setup]]
- [[#ivy-completion][Ivy completion]]
- [[#helm-completion][Helm completion]]
- [[#programming-languages][Programming Languages]]
  - [[#rust-mode][Rust-mode]]
  - [[#haskell-mode][Haskell-mode]]
- [[#rainbow-mode][Rainbow mode]]

* Name and Email

#+begin_src emacs-lisp
(setq user-full-name "Kishore S"
      user-mail-address "k.sath214@gmail.com")
#+end_src

* Doom theme

#+begin_src emacs-lisp
(setq doom-theme 'doom-monokai-pro)
;;(setq doom-theme 'doom-one)
#+end_src

* Doom font

#+begin_src emacs-lisp
(setq doom-font (font-spec :family "JetBrains Mono" :size 14)
      doom-big-font (font-spec :family "JetBrains Mono" :size 20))
(after! doom-themes
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t))
(custom-set-faces!
  '(font-lock-comment-face :slant italic)
  '(font-lock-keyword-face :slant italic))
#+end_src

* Doom Modeline

#+begin_src emacs-lisp
(set-face-attribute 'mode-line nil :font "Source Code Pro-13")
(setq doom-modeline-height 30
      doom-modeline-bar-width 5
      doom-modeline-persp-name t
      doom-modeline-persp-icon t)
#+end_src

* Org Shift Select

#+begin_src emacs-lisp
(setq org-support-shift-select 'always)
#+end_src

* Org directory

#+begin_src emacs-lisp
(setq org-directory "~/Projects/Org")
#+end_src


* Evil mode

** Vertical Splits on the right & horizontal splits on the bottom

#+begin_src emacs-lisp
(setq evil-split-window-below t
      evil-vsplit-window-right t)
#+end_src

* Dashboard

** Banner image + remove the keyboard shortcut tips on startup

#+begin_src emacs-lisp
;;(setq fancy-splash-image (concat doom-private-dir "link.jpg"))
;;(remove-hook '+doom-dashboard-functions #'doom-dashboard-widget-shortmenu)
#+end_src

** Dashboard in Emacsclient

#+begin_src emacs-lisp
(setq doom-fallback-buffer "*dashboard*")
(setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
#+end_src

** Dashboard Startup banner and stuff

#+begin_src emacs-lisp
(use-package dashboard
  :init
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-banner-logo-title "I have spent way too much time procrastinating")
  (setq dashboard-startup-banner 'logo)
  ;;(setq dashboard-startup-banner "~/.doom.d/emacs-dash.png")
  (setq dashboard-center-content nil)
  (setq dashboard-recent-items '((recents . 5)
                                 (agenda . 5)
                                 (bookmarks . 5)
                                 (projects . 5)))
  :config
  (dashboard-setup-startup-hook)
  (dashboard-modify-heading-icons '((recents . "file-text")
                                    (bookmarks . "book"))))
#+end_src

* All the Icons Dired

#+begin_src emacs-lisp
(add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
#+end_src

* Org Mode

** Org Bullets

#+begin_src emacs-lisp
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

** Org Syntax Higlighting

#+begin_src emacs-lisp
(setq org-src-fontify-natively t
      org-src-tab-acts-natively t
      org-confirm-babel-evaluate nil
      org-edit-src-content-indentation 0)
#+end_src

** Org keybindings

#+begin_src emacs-lisp
(map! :leader
      (:prefix ("O" . "Org")
       :desc "Org Tangle" "t" #'org-babel-tangle
       :desc "Org Detangle" "d" #'org-babel-detangle
       :desc "Org Results" "r" #'org-babel-open-src-block-result))
#+end_src

* Centaur Tabs

** Basic setup

#+begin_src emacs-lisp
;;(setq centaur-tabs-set-bar 'over
;;      centaur-tabs-set-icons t
;;      centaur-tabs-gray-out-icons 'buffer
;;      centaur-tabs-height 12
;;      centaur-tabs-set-modified-marker t
;;     centaur-tabs-style "bar"
;;      centaur-tabs-modified-marker "â€¢")
;;(map! :leader
;;      :desc "Toggle tabs globally" "t c" #'centaur-tabs-mode
;;      :desc "Toggle tabs local display" "t C" #'centaur-tabs-local-mode)
;;(evil-define-key 'normal centaur-tabs-mode-map (kbd "g <right>") 'centaur-tabs-forward        ; default Doom binding is 'g t'
;;                                               (kbd "g <left>")  'centaur-tabs-backward       ; default Doom binding is 'g T'
;;                                               (kbd "g <down>")  'centaur-tabs-forward-group
;;                                               (kbd "g <up>")    'centaur-tabs-backward-group)
#+end_src

* Ivy completion

#+begin_src emacs-lisp
(setq ivy-posframe-display-functions-alist
      '((swiper                     . ivy-posframe-display-at-point)
        (complete-symbol            . ivy-posframe-display-at-point)
        (counsel-M-x                . ivy-display-function-fallback)
        (counsel-esh-history        . ivy-posframe-display-at-window-center)
        (counsel-describe-function  . ivy-display-function-fallback)
        (counsel-describe-variable  . ivy-display-function-fallback)
        (counsel-find-file          . ivy-display-function-fallback)
        (counsel-recentf            . ivy-display-function-fallback)
        (counsel-register           . ivy-posframe-display-at-frame-bottom-window-center)
        (nil                        . ivy-posframe-display))
      ivy-posframe-height-alist
      '((swiper . 20)
        (t . 10)))
(ivy-posframe-mode 1) ; 1 enables posframe-mode, 0 disables it.
#+end_src

* Helm completion

#+begin_src emacs-lisp
;;(global-set-key (kbd "M-x") 'helm-M-x)
;;(helm-mode 1)
#+end_src

* Programming Languages

** Rust-mode

#+begin_src emacs-lisp
(require 'rust-mode)
(add-hook 'rust-mode-hook #'lsp
          (lambda () (setq indent-tabs-mode nil)))
(setq rust-format-on-save t)

#+end_src

*** Keybindings

#+begin_src emacs-lisp
(map! :leader
      (:prefix ("r" . "Rust")
       :desc "Rust Run" "r" #'rust-run))
#+end_src

** Haskell-mode

#+begin_src emacs-lisp
(require 'haskell-mode-autoloads)
#+end_src

*** Keybindings

#+begin_src emacs-lisp
(map! :leader
      (:prefix ("H" . "Haskell")
       :prefix ("i" . "imports")
       :desc "Navigate to imports" "n" #'haskell-navigate-imports
       :desc "Sort imports" "s" #'haskell-sort-imports
       :desc "Align imports" "a" #'haskell-align-imports))
#+end_src

* Rainbow mode

#+begin_src emacs-lisp
(define-globalized-minor-mode global-rainbow-mode rainbow-mode
  (lambda () (rainbow-mode 1)))
(global-rainbow-mode 1)
#+end_src
